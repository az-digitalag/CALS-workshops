---
title: "Instructor notes"
format: html
editor: visual
---

## Slides

Do the slides to give background and context.

Remember to let people know that even if they don't end up making an R package that goes on CRAN (or any R package at all), that the skills they learn in the workshop will be helpful

## Set up build tools

> This may not be strictly necessary until you want to build packages containing C or C++ code.
> Especially if you are using RStudio, you can set this aside for now.
> The IDE will alert you and provide support once you try to do something that requires you to setup your development environment

::: callout-important
If it isn't going to work for someone, they can use Posit Cloud as a fallback.
Build tools come pre-installed there.
:::

### macOS

Check if you already have xcode command line tools installed:

``` bash
xcode-select -p
```

If you get an error instead of a path like `/Library/Developer/CommandLineTools`, then you need to install xcode command line tools with:

``` bash
xcode-select --install
```

### Windows

Install Rtools from <https://cran.r-project.org/bin/windows/Rtools/>

-   **Do *not*** select the box for \"Edit the system PATH\".
    devtools and RStudio should put Rtools on the `PATH` automatically when it is needed.

-   **Do** select the box for \"Save version information to registry\".
    It should be selected by default.

## Install needed packages

```{r}
#| eval: false
install.packages(c("devtools", "here"))
```

## Configure Git

Checklist of what to do to set things up.

```{r}
library(usethis)
git_sitrep()
```

Introduce yourself to git:

```{r}
#| eval: false
git_vaccinate()
use_git_config(
  user.name = "your name",
  user.email = "youremail@arizona.com", #email you used to sign up for GitHub account
)

#sets your default branch name to "main"
git_default_branch_configure()

```

There are some other things to do in `git_sitrep()`, but first, let's make our first commit.
Make a commit using the git pane in RStudio.
Commit message can be something like "initial commit"

```{r}
#check how we're doing
git_sitrep()
```

Set up personal access token (PAT).
This is necessary to securely send things between your computer and GitHub.

```{r}
#| eval: false
create_github_token() #takes you to external website. Add description, but keep defaults
```

```{r}
#| eval: false
gitcreds::gitcreds_set()
#paste in PAT from GitHub
```

```{r}
git_sitrep()
```

Now everything should be set (except maybe `upstream`) with no red x

## Convert into a package

```{r}
#| eval: false
here::here() #prints absolute path to current project directory
create_package(here::here()) #converts current project to skeleton R package.  Overwrites files.
```

## Go through the files created

-   `.gitignore` - list files you don't want to be on GitHub

-   `.Rbuildignore` - files that you want on GitHub, but that can't be part of your R package

-   `DESCRIPTION` - contains package metadata

-   `<package name>.Rproj` - holds settings for the RStudio Project

-   `NAMESPACE` - read-only file that will be generated once we add some functions

-   `R/` - this is where you'll put R code for your package's functions

## Add a function

1.  New .R file

2.  Start with super simple:

    ```{r}
    greet <- function() {
      "Hello!"
    }
    ```

3.  `load_all()` and run `greet()`

4.  Add argument:

    ```{r}
    greet <- function(name) {
      paste0("Hello ", name, "!")
    }
    ```

5.  `load_all()` and `greet("yourname")`

6.  `greet()` errors, so let's add a default

    ```{r}
    greet <- function(name = "User") {
      paste0("Hello ", name, "!")
    }
    ```

7.  `load_all()` and `greet()`

## `check()`

Run `check()` and address stuff:

-   Edit author field in `DESCRIPTION`

-   run `use_mit_license()`

## Add documentation

1.  With cursor in function definition, add roxygen skeleton and fill it out
2.  `document()` then `?greet`
3.  Explore and commit changes
4.  Discuss roxygen2 fields and where to get more help on this

## `check()` again

should pass

## Install

Should be able to install the package now, load it with `library()`, etc.

## Add a README

-   run `use_readme_md()` and edit it.

-   You could use `use_readme_rmd()` if you want a README that executes some code, like running an example.

-   Commit and push changes.
    View on GitHub

## Add a data set

-   Read in dataset from URL (paste code into chat I guess?)

-   `use_data()` to add dataset to your package

```{r}
#read in data as an R object
cupcakes <- read_csv("url/to/cupcakes/dataset.csv")
#use_data() on the R object to add to your package
use_data(cupcakes)
```

-   Inspect files added

## Ideas...

-   Use `lubridate` or `hms` to say either "good morning", "good afternoon" or "good evening" to practice `use_package()`

-   Add a dataset from a .csv online (read it in, wrangle, `use_data()`)

-   add tests with `use_testthat()`

-   add github with `use_github()`

-   add CI with `use_github_actions()`
