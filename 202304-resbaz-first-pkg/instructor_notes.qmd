---
title: "Instructor notes"
format: html
editor: visual
---

## Slides

Do the slides to give background and context.

Remember to let people know that even if they don't end up making an R package that goes on CRAN (or any R package at all), that the skills they learn in the workshop will be helpful

## Packages needed
```{r}
#| eval: false
install.packages(c("devtools", "here"))
```

You'll also need build tools.  

### macOS
For macOS, in terminal:

``` bash
xcode-select -p
```

If you get an error instead of a path like `/Library/Developer/CommandLineTools`, then you need to install xcode command line tools with:

``` bash
xcode-select --install
```

## Windows

Install Rtools (which is not an R package!)


## Configure Git

Checklist of what to do to set things up.

```{r}
library(usethis)
git_sitrep()
```

Introduce yourself to git:

```{r}
#| eval: false
git_vaccinate()
use_git_config(
  user.name = "your name",
  user.email = "youremail@arizona.com", #email you used to sign up for GitHub account
)

#sets your default branch name to "main"
git_default_branch_configure()

```

There are some other things to do in `git_sitrep()`, but first, let's make our first commit.

```{r}
#check how we're doing
git_sitrep()
```

Set up personal access token (PAT)

```{r}
#| eval: false
create_github_token() #takes you to external website. Add description, but keep defaults
```


```{r}
#| eval: false
gitcreds::gitcreds_set()
#paste in PAT from GitHub
```

```{r}
git_sitrep()
```


Now everything should be set (except maybe `upstream`) with no red x

## Convert into a package

```{r}
#| eval: false
here::here() #prints absolute path to current project directory
create_package(here::here()) #converts current project to skeleton R package.  Overwrites files.
```


## Make a package

1.  Install build tools
    -   Breakout rooms by OS?
2.  Install necessary R packages
3.  Many ways to start a package, we are going GitHub first route
4.  New project from github, then `usethis::create_package(here::here())` to convert current project to package.
5.  Go through all the files created and explain them
6.  `use_git()` and troubleshoot. *extremely brief* overview of what git is and super basic use (commit is all they need to start with)

## Add a function

1.  New .R file

2.  Start with super simple:

    ```{r}
    greet <- function() {
      "Hello!"
    }
    ```

3.  `load_all()` and run `greet()`

4.  Add argument:

    ```{r}
    greet <- function(name) {
      paste0("Hello ", name, "!")
    }
    ```

5.  `load_all()` and `greet("yourname")`

6.  `greet()` errors, so let's add a default

    ```{r}
    greet <- function(name = "User") {
      paste0("Hello ", name, "!")
    }
    ```

7.  `load_all()` and `greet()`

## `check()`

Run `check()` and address stuff:

-   DESCRIPTION

-   `use_mit_license()`

## Add documentation

1.  With cursor in function definition, add roxygen skeleton and fill it out
2.  `document()` then `?greet`
3.  Explore and commit changes

## `check()` again

should pass

## Install

Should be able to install the package now, load it with `library()`, etc.

## Ideas...

-   Use `lubridate` or `hms` to say either "good morning", "good afternoon" or "good evening" to practice `use_package()`

-   Add a dataset from a .csv online (read it in, wrangle, `use_data()`)

-   add tests with `use_testthat()`

-   add github with `use_github()`

-   add CI with `use_github_actions()`
