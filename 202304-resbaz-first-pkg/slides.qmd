---
title: "Untitled"
format: revealjs
editor: visual
---

## What is an R package?

-   Provides functions to fit models, wrangle data, create plots, etc.

-   A way of documenting and sharing data sets

## Why make an R package?

-   You find yourself copying and pasting code from one project to another

-   You have a great data set you want to document and share

-   You think your code would be helpful for others working with similar data or analyses

-   These things don't already exist in an R package somewhere

## Overview

In the workshop today we will:

1.  Set up your system for R development
2.  Make an R package with a function, a data set, documentation, and more!
3.  Put that package on GitHub so it can be installed by others
4.  Add unit tests and set up automated testing with GitHub actions
5.  Give you the resources to learn more

## Naming your package

-   Short, no spaces hyphens or underscores

-   Should reflect what the package does to some extent

-   Shouldn't be the name of an already existing package

-   Check for availability with the [`available` package](https://github.com/r-lib/available)

Today we are making a toy package, so your package name doesn't need to follow these suggestions!

## Making a New Package

There are *several* ways to go about making a new R package that can be shared.
We're going to go with the "GitHub first" method today:

1.  create an empty repository on GitHub with our package's name
2.  clone that repository as a new R project
3.  convert that R project into an R package

## Git and GitHub

-   We will be using git and GitHub in this workshop in it's simplest ways

-   Git is a "version control" software that will let you track changes to files and "push" those changes to GitHub

-   GitHub is a website for hosting code "repositories" and it will be how people can find and install our R package

-   <!--# add link to git/github workshop -->

## Needed packages

```{r}
library(devtools)
library(here)
#if these lines give errors, you may need to install these packages:
# install.packages("devtools")
# install.packages("here")
```

`devtools` is a "meta package" kind of like `tidyverse`.
`here` will only be used during the setup process for this workshop.

## Check for git

Check that RStudio knows where git is on your computer.
Go to Tools \> Global Options... and select the Git/SVN option.

Make sure the checkbox is checked and there is something in the "Git executable" box

![](settings.png)

## Installing git

If there is nothing in the git executable box, it is possible you need to install git on your system:

### macOS

In terminal:

``` bash
xcode-select --install
```

### Windows

Download the installer here: <https://git-scm.com/download/win>
