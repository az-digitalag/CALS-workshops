---
title: "Untitled"
format: revealjs
editor: visual
---

## What is an R package?

-   Provides functions to fit models, wrangle data, create plots, etc.

-   A way of documenting and sharing data sets

## Why make an R package?

-   You find yourself copying and pasting code from one project to another

-   You have a great data set you want to document and share

-   You think your code would be helpful for others working with similar data or analyses

-   These things don't already exist in an R package somewhere

## Overview

In the workshop today we will:

1.  Set up your system for R development
2.  Make an R package with a function, a data set, documentation, and more!
3.  Put that package on GitHub so it can be installed by others
4.  Add unit tests and set up automated testing with GitHub actions
5.  Give you the resources to learn more

## Git and GitHub

-   We will be using git and GitHub in this workshop in it's simplest way

-   GitHub is a website for hosting code "repositories" and it will be how people can find and install our R package

-   Git is a "version control" software that will let you track changes and "push" those changes to GitHub

## Needed packages

`devtools` is a "meta package" kind of like `tidyverse`.
`here` will only be used during the setup process for this workshop.

```{r}
#code to load packages or install if you don't have them already
if(!require(devtools)) {
  install.packages("devtools")
}
if(!require(here)) {
  install.packages("here")
}
```

## Configure git

In the console, run `git_sitrep()` to get a "situation report" of your git setup.

```{r}
library(devtools)
git_sitrep()
```

It is possible you don't have `git` installed.
To install it:

### macOS

In terminal

``` bash
xcode-select --install
```

### Windows

<https://git-scm.com/download/win>

## Making a New Package

There are *several* ways to go about making a new R package.
We're going to go with the "GitHub first" method:

1.  create an empty repository on GitHub with our package's name
2.  clone that repository as a new R project
3.  convert that R project into an R package
