---
title: "Demystifying APIs for Researchers"
author: "Eric R. Scott"
date: "2024-01-24"
format: revealjs
execute: 
  echo: true
---

<!--# modify David's slides: https://docs.google.com/presentation/d/e/2PACX-1vTAx2NWH4xRwshbXvm7e-hXUyF0DBiAOSBOgzCIp_dI71GrCYDlyeEISKUscdIqI_4k2UVoOEtu73Gu/pub?start=false&loop=false&delayms=3000&slide=id.p -->

## Learning Objectives

-   Understand what an API (application programming interface) is
-   Get a sense of what kinds of data are available via APIs
-   Understand how to get data from an API into R programmatically

## What is an API

<!--# Adapt David's figure-->

::: notes
APIs provide a way that data can be accessed from the web via URLs.
Allows all sorts of "clients" to access the data.
Including web interfaces.
:::

## Getting data on the web

-   Made for humans
-   Point and click

E.g. [CAS Common Chemistry](https://commonchemistry.cas.org/)

1.  Search for the name of a chemical (e.g. hexanol)
2.  Click on a result to get more info

## What's missing?

There's no easy way to get the results in a ready-to-analyze form!

## Getting data for analysis

**This is where an API is useful**

-   Made for machines
-   Programmable

<https://commonchemistry.cas.org/api-overview>

## Getting data directly from an API

Every API is a little different, but here the API equivalent to <https://commonchemistry.cas.org/results?q=hexanol> is <https://commonchemistry.cas.org/api/search?q=hexanol>.

![](json_example.png){fig-align="center"}

## What am I looking at?

The result of <https://commonchemistry.cas.org/api/search?q=caffeine> is in a format called JSON.
It's made of nested key: value pairs.
For example

``` json
{
  "count": 2,
  "results": [
    {
      "rn": "111-27-3",
      "name": "1-Hexanol",
      "image": "<svg ...</svg>"
    },
    {
      "rn": "25917-35-5",
      "name": "Hexanol",
      "image": "<svg ...</svg>"
    }
  ]
}
```

## Structure of an API request

![](api_structure.png){fig-align="center"}

::: callout-note
This is a *fairly standard* API, but not all APIs take requests structured in the same way!
You'll have to find the documentation for each particular API to figure out how to build a query.
:::

::: notes
Different endpoints generally return different data or correspond to different databases.

Sometimes you can have multiple queries in an API, but this one only takes one
:::

## How to know how to use an API

Let's look at some API documentation: <https://commonchemistry.cas.org/api-overview>

What endpoints are available?
What queries can you use?

::: callout-note
This API only allows one "method"â€”GET.
Other methods exist (e.g. POST), but GET is the most common.
:::

## Building an API request in R

-   Reproducible queries

-   Iterate over many queries

-   Create re-usable functions

```{r}
library(httr2)
```

## 1. Create a request

Start a request with the domain

```{r}
req_search <-
  request("https://commonchemistry.cas.org/api") |> 
  req_url_path_append("search") |> 
  req_url_query(q = "caffeine")

req_search
```

::: notes
Notice the default method is GET, which is what we want.
:::

## 2. Perform the request

```{r}
resp_search <- 
  req_perform(req_search)
resp_search
```

::: notes
The data is in there as json.
:::

## 3. Get the results

```{r}
results_search <- resp_body_json(resp_search)
str(results_search)
```

# Live Demo

<!--# Switch over to participatory live coding working through notes.qmd in a fresh document -->
