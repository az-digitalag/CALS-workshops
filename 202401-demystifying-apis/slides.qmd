---
title: "Demystifying APIs for Researchers"
author: "Eric R. Scott"
date: "2024-01-24"
format: revealjs
---

<!--# modify David's slides: https://docs.google.com/presentation/d/e/2PACX-1vTAx2NWH4xRwshbXvm7e-hXUyF0DBiAOSBOgzCIp_dI71GrCYDlyeEISKUscdIqI_4k2UVoOEtu73Gu/pub?start=false&loop=false&delayms=3000&slide=id.p -->

## Learning Objectives

-   Understand what an API (application programming interface) is
-   Get a sense of what kinds of data are available via APIs
-   Understand how to get data from an API into R programmatically

## What is an API

<!--# Adapt David's figure-->

::: notes
APIs provide a way that data can be accessed from the web via URLs.
Allows all sorts of "clients" to access the data.
Including web interfaces.
:::

## Getting data on the web

-   Made for humans

-   Point and click

E.g. [gbif.org](https://www.gbif.org/)

1.  Search for a species (common names are accepted)
2.  Click on the "Species" tab

## What's missing?

There's no easy way to get the results in a ready-to-analyze form!

## Getting data for analysis

**This is where an API is useful**

-   Made for machines

-   Programmable

<https://www.gbif.org/developer/summary>

## Getting data directly from an API

Instead of <https://www.gbif.org/occurrence/search?q=puma>

Do <https://api.gbif.org/v1/occurrence/search?q=puma>

::: callout-note
This pattern won't work for every API!
:::

## What am I looking at?

The result of <https://api.gbif.org/v1/occurrence/search?q=puma> is in a format called JSON.
It's made of nested key: value pairs.
For example

``` json
{
  results: {
    key: 1,
    species: Lynx lynx,
    continent: Eurasia
  },
  {
    key: 2,
    species: Lynx canadensis,
    continent: North America
  }
}
```

## How to know how to use an API

Let's look at some API documentation: <https://www.gbif.org/developer/species>

RESTful APIs most common kind of API??
Not sure how important it is to know difference between REST and SOAP or whatever

Methods:

-   GET: get some data

-   PUT: create a record

-   POST: update a record

-   DELETE: delete a record

Usually you are only allowed to do GET

## Structure of an API request

https://api.gbif.org/v1/species?n
ame=Lynx%20canadensis

<!--# annotate like David's slide to show protocol, domain, api version, endpoint, and query -->

## Building an API request in R

<!--# This is where the workshop diverges from David's slides -->

```{r}
library(httr2)
```

Start a request with the domain

```{r}
req <- 
  request("https://api.gbif.org/")
req
```

Notice it prints some info.
Default method is GET which lines up with what we saw in the documentation, so that is good.

Add v1

```{r}
req <- 
  req |> 
  req_url_path("v1")
req
```

Notice that `httr2` works well with the pipe (`|>` or `%>%`)

Add the endpoint with `req_url_path_append()`

```{r}
req <-
  req |> 
  req_url_path_append("species")
req
```

Notice that it takes care of the `/` for you.

Now add the query with `req_url_query()`

```{r}
req <-
  req |>
  req_url_query(name = "Lynx canadensis")
req
```

Notice that it takes care of all the URL encoding for you.
Nice.

Now make the request with `req_perform()`

```{r}
resp <- 
  req |> 
  req_perform()
resp
```

Notice that `resp` prints the metadata only.

Now let's get that JSON

```{r}
data_raw <-
  resp |> 
  resp_body_json()
View(data_raw)
```

Notice that the `results` piece is where everything we care about is.

## But don't use `httr2` for GBIF because there's already an R Package

More generally, discuss how/when you should look for existing solutions before creating your own API interface with `httr2`.
Link to rOpenSci search page.
