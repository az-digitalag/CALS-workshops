---
title: "Crafting Publication Quality Data Visualizations with `ggplot2`"
author: "Eric R. Scott"
format: 
  revealjs:
    code-link: true
    incremental: true
    fig-width: 7
    fig-height: 3.5
    theme: [custom.scss]
editor: visual
execute: 
  echo: true
knitr: 
  opts_chunk: 
    fig.align: "center"
---

## Learning Objectives

-   Customize color palettes with accessibility in mind
-   Customize legends
-   Customizing axes (ticks, grid-lines, labels, date axes, transformations)
-   Customize appearance of plots with themes
-   Arrange multi-panel figures
-   Save high resolution or vector formats

## Required Packages

```{r}
library(tidyverse) #includes ggplot2
library(palmerpenguins) #for data
library(patchwork) #multi-panel figures
library(colorspace)
```

Take a moment to check if these load and install them if you need to.

## Journal Requirements

Journals often require certain modifications to your plots to make them publication-ready

-   High resolution
-   Specific file types (TIFF, EPS, PDF are common)
-   Figure size limits
-   Font size suggestions

## Not required, but good practice

Other modifications to the appearance of your plot are a good idea, but less often required by journals or reviewers

-   Colorblind accessible colors
-   Grey scale friendly colors
-   Perceptually-even colors
-   Screen-reader compatible
-   High [data-ink ratio](https://infovis-wiki.net/wiki/Data-Ink_Ratio) (simplify plot, within reason)
-   Arrangement of related plots into multi-panel figures

## Example plot 1 {.smaller}

```{r}
#| code-line-numbers: "|1-3|6|7|8-9|10-11"
mean_sd <- function(x) {
  data.frame(y = mean(x), ymin = mean(x) - sd(x), ymax = mean(x) + sd(x))
}

p1 <-
  ggplot(penguins |> filter(!is.na(sex)),
         aes(x = species, y = body_mass_g, shape = sex)) +
  geom_point(alpha = 0.2,
    position = position_jitterdodge(dodge.width = 0.75)) +
  stat_summary(fun.data = mean_sd,
    position = position_dodge(width = 0.75))
p1
```

## Example plot 2 {.smaller}

```{r}
#| code-line-numbers: "|2|3-9|10|11"
p2 <-
  ggplot(penguins,
         aes(
           x = flipper_length_mm,
           y = bill_length_mm,
           color = species,
           fill = species,
           shape = species
         )) +
  geom_point() +
  geom_smooth(method = "lm")
p2
```

## Example plot 3 {.smaller}

```{r}
#| code-line-numbers: "|5"
p3 <-
  ggplot(penguins,
         aes(
           x = flipper_length_mm,
           y = bill_depth_mm,
           color = species,
           fill = species,
           shape = species
         )) +
  geom_point() +
  geom_smooth(method = "lm")
p3
```

# Custom Colors {.rainbow}

## Color Palettes

Choose a color palette that is:

-   Colorblind friendly
-   Greyscale friendly
-   Perceptually even
-   High contrast (with background & within palette)

## Viridis {.smaller}

The viridis color palettes meet most of these criteria and are built-in to `ggplot2`.
They are available with `scale_fill_viridis_*()` and `scale_color_viridis_*()` functions.

```{r}
#| layout-ncol: 2
#| fig-cap: 
#|   - "Default color scale"
#|   - "Viridis color scale"
v <- ggplot(penguins,
            aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4)
v #default colors
v + scale_color_viridis_c() #viridis colors
```

## Viridis variants {.smaller}

Other viridis palettes are available by changing `option` in the scale function

```{r}
#| layout-ncol: 3
#| code-fold: true
v + scale_color_viridis_c(option = "magma")
v + scale_color_viridis_c(option = "inferno")
v + scale_color_viridis_c(option = "plasma")
v + scale_color_viridis_c(option = "cividis")
v + scale_color_viridis_c(option = "rocket")
v + scale_color_viridis_c(option = "mako")

```

## Viridis customization

The upper end of viridis palettes tends to be very bright yellow.
You can limit the range of colors used with the `begin` and `end` arguments

```{r}
#| layout-ncol: 2
v + scale_color_viridis_c()
v + scale_color_viridis_c(begin = 0.1, end = 0.9)
```

## Viridis for discrete data {.smaller}

The viridis palette can be used for discrete / categorical data with `scale_color_viridis_d()`.

```{r}
p2 + scale_color_viridis_d(end = 0.9, option = "C")
```

::: callout-warning
## Uh oh!

This only applied the new palette to the `color` aesthetic!
:::

## Applying palettes to multiple aesthetics {.smaller}

*Usually* `color` and `fill` are mapped to the same data.
You can add both `scale_color_*()` and `scale_fill_*()` to a plot OR you can use the `aesthetics` argument.

```{r}
p2 + 
  scale_color_viridis_d(aesthetics = c("color", "fill"), end = 0.9, option = "C")
```

## Other color palettes

There are ***many*** places to get additional color palettes.

A few of my favorites:

::: nonincremental
-   [`colorspace`](https://hclwizard.org/r-colorspace/)
-   [`cols4all`](https://github.com/mtennekes/cols4all)
-   [`paletteer`](https://emilhvitfeldt.github.io/paletteer/)
-   [Comprehensive list of color palettes in r](https://github.com/EmilHvitfeldt/r-color-palettes#readme)
:::

::: callout-note
## Activity

Let's find a palette we like using `cols4all::4a_gui()`
:::

## Manual color palettes

You can always use your own colors using `scale_color_manual()` if you know the hex codes.

```{r}
my_cols <- c("#B60A1C","#E39802","#309143")

p2 + 
  scale_color_manual(values = my_cols, aesthetics = c("color", "fill"))
```

## Manual color palettes

Use a **named vector** to specify which colors go with which factor level

```{r}
#| code-line-numbers: "1-2|4|"
my_cols <- 
  c("Chinstrap" = "#B60A1C", "Gentoo" = "#E39802", "Adelie" = "#309143")
p2 <- p2 + 
  scale_color_manual(values = my_cols, aesthetics = c("color", "fill"))
p3 <- p3 +
  scale_color_manual(values = my_cols, aesthetics = c("color", "fill"))
```

. . .

```{r}
#| echo: false
#| layout-ncol: 2
p2;p3
```

# Legends

## Legend titles

We can set the name for scales a few ways: with `labs()` or with the `names=` argument of the scale.

```{r}
p2 + labs(color = "Penguin Species")
# Code below replaces existing color scale
# p2 + scale_color_discrete(name = "Penguin Species") 
```

## Legend titles

Legends for scales with the **same name** will be combined if possible

```{r}
p2 + labs(color = "Penguin Species",
          shape = "Penguin Species",
          fill = "Penguin Species")
```

## Legend labels

What if we want to use the Latin name for the penguin species?
We can use the `labels` argument and a named vector.

```{r}
#| output-location: slide
#| code-line-numbers: "|1-3|7"
#| fig-width: 9
#| fig-height: 5
scinames <- c("Adelie" = "P. adeliae",
              "Chinstrap" = "P. antarticus",
              "Gentoo" = "P. papua")
p2 <- p2 +
  scale_color_manual(
    values = my_cols,
    labels = scinames,
    aesthetics = c("color", "fill")
  )

p2
```

## Legend labels

Let's do the same for `p3`:

```{r}
#| output-location: slide
#| fig-width: 9
#| fig-height: 5
p3 <- p3 +
  scale_color_manual(
    values = my_cols,
    labels = scinames,
    aesthetics = c("color", "fill")
  )
p3
```

# Axes

## Axes

Axes are also a type of scale.
In `p1` the x-axis corresponds to `scale_x_discrete()` and the y-axis corresponds to `scale_y_continuous()`.

```{r}
#| echo: false
p1
```

## Custom labels

Use what we learned before to customize the categorical x-axis labels in `p1`!

```{r}
(p1 <- p1 + scale_x_discrete(name = "Species", labels = scinames))
```

## Custom breaks

Change the (approximate) number of breaks with `n.breaks=`

```{r}
(p1 <- p1 + scale_y_continuous(name = "Body Mass (g)", n.breaks = 12))
```

::: notes
This uses "pretty" breaks at whole numbers, so you don't get *exactly* `n.breaks`
:::

## Custom breaks

Specify breaks *exactly* with `breaks=`

```{r}
p1 + scale_y_continuous(breaks = c(3333, 5000, 5555))
```

## Axis limits

Two ways to set axis limits:

::: nonincremental
-   In `scale_*()` or with `xlim()`/`ylim()` --- drops **data** outside of range
-   With `coord_*()` --- only crops plot area
:::

## Axis limits

::: columns
::: {.column width="50%"}
```{r}
#| fig-width: 5
#| fig-height: 5
p1 + 
  scale_y_continuous(limits = c(2500, 5500), n.breaks = 12, name = "Body Mass (g)")
```
:::

::: {.column width="50%"}
```{r}
#| fig-width: 5
#| fig-height: 5
p1 + 
  coord_cartesian(ylim = c(2500, 5500))
```
:::
:::

::: notes
In the first example, the limits are removing data points *before* `stat_summary()` does its calculations, so no data points above 5500 g are used in calculating the mean and standard deviations used to draw the error bars and black points.
In the second example, the error bars are calculated using all the data and the plot area just cuts off at \> 5500 g
:::

## Other useful `coord_`s

1:1 (or custom) ratio of axes with `coord_fixed()`

```{r}
p2 + coord_fixed()
```

## Other useful `coord_`s

Horizontal plots with `coord_flip()`

```{r}
(p1 <- p1 + coord_flip())
```

# Themes

## Complete themes

There are several complete themes built-in to `ggplot2`, and many more available from other packages such as `ggthemes`.

```{r}
#| layout-ncol: 2
#| fig-cap:
#|   - "theme_bw()"
#|   - "theme_minimal()"
p2 + theme_bw()
p2 + theme_minimal()
```

## Custom themes

Customizing themes "manually" involves knowing the name of the theme element and it's corresponding `element_*()` function.

```{r}
p1 + theme(axis.title.x = element_text(face = "bold", colour = "darkblue"))
```

## Custom themes

It's best to find a built-in `theme_*()` function that gets you most of the way there and then customize with `theme()`

```{r}
p1 + 
  theme_minimal() + 
  theme(axis.line = element_line(linewidth = 0.5, lineend = "round"))
```

## Custom themes

::: callout-note
## Activity

Name some things about the appearance of `p1` that you want to change and we'll figure it out together!
:::

::: callout-tip
Check the examples in the help page for `theme()` <https://ggplot2.tidyverse.org/reference/theme.html> to figure out the names of theme elements
:::

<!--# at the very end, supply FULL code for multi-panel plot in scrollable slide -->
