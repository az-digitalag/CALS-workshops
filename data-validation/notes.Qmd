---
title: "Data Validation in Excel and R"
author: "Eric R. Scott"
date: "`r Sys.Date()`"
format: html
---

## Overview

There are many opportunities for human error in data.
Let's find them before we do analysis or maybe even before we finish the field season.

## Learning Objectives

-   Understand best practices for entering data and fixing errors in data

-   Use Excel data validation tools to prevent data entry errors

-   Compare data entered by two people in R to check for data entry mistakes

-   Use the `pointblank` package to perform data validation checks

::: callout-important
## We are only interested in fixing verifiable mistakes! It is generally **not** appropriate to remove or edit outliers---extreme values that may or may not be accurate.
:::

## Software needed

You'll need access to Excel, R, RStudio, and the following R packages:

```{r}
#| output: false
library(tidyverse)
library(visdat)
library(pointblank)
library(readxl)
```

## Avoiding mistakes in data entry

Set up validation tools in your data entry spreadsheet to stop data entry errors in their tracks!

<!--# add gif or image here -->

### Data Validation Tools in Excel

-   Select a column (or cells) and choose `Data > Validation â€¦` from the menu

-   Use "list" to restrict to specific values for categorical data

-   Use "whole number" for count data

-   Can also be set up *after* data entry.
    Highlight invalid data with "Circle Invalid Data" from toolbar

### Watch out for dates!

-   Even with validation turned on, Excel will auto-format anything that remotely looks like a date!

[![](images/nature-excel.png){fig-alt="Nature headline: \"Autocorrect errors in Excel still creating genomics headache.  Despite geneticists being warned about spreadsheet problems, 30% of published papers contain mangled gene names in supplementary data." fig-align="center" width="400"}](https://www.nature.com/articles/d41586-021-02211-4)

\[DEMO\]

### Stop Excel Autocorrect!

![](images/excel-meme.jpg){fig-alt="Confused anime guy with butterfly meme where the guy has a Microsoft Excel logo on his face, the butterfly is \"any data at all\" and the caption is \"is this a date?\"" width="200"}

1.  Explicitly set all column types to numeric, text, date, etc.

2.  Make sure no columns are set to "general" ![](images/general-x.png){width="120"}

### Double-entry Method

-   Two people enter the same data, then compare programatically.

-   In the `data` folder, there are two versions of a dataset---one entered by Eric and one entered by Jessica.

```{r}
eric <- read_excel("data/data_eric.xlsx")
jessica <- read_excel("data/data_jessica.xlsx")
```

### Compare visually with `visdat`

We can compare them a couple of ways.
First, we can compare them visually using the `visdat` package.
This only works if the two datasets are the same dimensions

```{r}
vis_compare(eric, jessica)
```

We can also compare by finding any rows that are not identical between the two datasets with the `anti_join()` function from `dplyr`.
Adding row numbers first will make it easier to find mistakes in the csv files.

```{r}
# add rownumbers that match Excel (headers are row 1)
eric    <- eric    |> mutate(row = 2:(n()+1), .before = plot)
jessica <- jessica |> mutate(row = 2:(n()+1), .before = plot)
```

```{r}
#values in `eric` that are different in `jessica`
anti_join(eric, jessica)
#values in `jessica` that are different in `eric`
anti_join(jessica, eric)
```

This finds several rows that aren't identical and have potential problems.
For example for `plant_id` 33, Eric entered "27" for the height in 2000 and Jessica entered "21".
Whoever recorded the measurement probably just had messy handwriting.
There are two rows that appear in Eric's version but not in Jessica's version.
Maybe Jessica skipped some rows or Eric accidentally entered two rows twice?
These should be double-checked on the raw data sheet.

## Catching mistakes in correctly entered data

```{r}
#after fixing data-entry errors, we get `data_resolved.csv`
plants <- read_excel("data/data_resolved.xlsx")
```

After correcting the data entry, there may still be mistakes in the data as a result of incorrect recording of the data (or possibly a mistake that both Jessica *and* Eric made).\
At this point, it is likely ***impossible*** to know for sure if aberrant data are truly mistakes and not just extreme values, unless you can go back to the field to check.
However, we can still flag these unexpected values to double-check the raw data or in the field next time you are there.

### The `pointblank` package

```{r}
library(pointblank)
```

[`pointblank`](https://rich-iannone.github.io/pointblank/) is an R package for data validation.\
It includes 6 (six!) data validation workflows!
Much of what it does is overkill for most of us, but the [Data Quality Reporting Workflow](https://rich-iannone.github.io/pointblank/articles/VALID-I.html) makes very cool looking tables that will help you pinpoint potential mistakes.

-   start with simple example
-   demo "CSV" button
-   then talk about action levels
-   then talk about different validation functions

```{r}
create_agent(
  tbl = plants,
  label = "plants 2000 & 2001",
) |> 
  # basic checks on column types with `col_is_*` functions
  col_is_character(columns = plot) |> 
  col_is_numeric(columns = starts_with(c("shts", "ht", "infl"))) |> 
  # check values with `col_vals_*` functions
  #TODO: simplify plot or sublot to be like 5 possibilities or something easier to do programmatically
  # col_vals_in_set(columns = subplot, set = LETTERS[1:10]) |>
  col_vals_between(columns = starts_with("shts"), left = 1, right = 4, na_pass = TRUE) |> 
  col_vals_lt(columns = starts_with("ht"), 60) |> 
  # "custom" checks with col_vals_expr().  E.g. check that height is measured to nearest cm:
  col_vals_expr(~ ht_2000 %% 1 == 0) |> 
  col_vals_expr(~ ht_2001 %% 1 == 0) |> 
  interrogate()
```

-   preconditions (or just mutate and make a new agent) to check growth between years

-   publish validation to rstudio connect

-   if you want something fancy set up for your lab (automation, advanced types of validations, etc.) contact us to talk more.

## Help

Feel free to drop by the [CCT Data Science Team office hours](https://datascience.cals.arizona.edu/office-hours), which happens every Tuesday morning.
We would love to help you with your R questions about date/time, and more!

You can also [make an appointment with Eric](https://calendar.google.com/calendar/appointments/schedules/AcZssZ0xpzu3Nlo0FCIAjFFktPFzyl5Aup9-1yErSy9y8_Iq2P6DWisiYc8PhUnn6l5z74D3OtgTRPSm) to discuss this content and get troubleshooting help.
